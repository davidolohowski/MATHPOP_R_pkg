// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// err_M_cpp
double err_M_cpp(double M, double m0, double b0, double b1);
RcppExport SEXP _MATHPOP_err_M_cpp(SEXP MSEXP, SEXP m0SEXP, SEXP b0SEXP, SEXP b1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    rcpp_result_gen = Rcpp::wrap(err_M_cpp(M, m0, b0, b1));
    return rcpp_result_gen;
END_RCPP
}
// f_cpp
NumericVector f_cpp(NumericVector M, double Lim, double a);
RcppExport SEXP _MATHPOP_f_cpp(SEXP MSEXP, SEXP LimSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(f_cpp(M, Lim, a));
    return rcpp_result_gen;
END_RCPP
}
// f_cpp_trunc
NumericVector f_cpp_trunc(NumericVector M, double Lim, double a);
RcppExport SEXP _MATHPOP_f_cpp_trunc(SEXP MSEXP, SEXP LimSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(f_cpp_trunc(M, Lim, a));
    return rcpp_result_gen;
END_RCPP
}
// dnorm_cpp
double dnorm_cpp(double x, double mu, double sigma);
RcppExport SEXP _MATHPOP_dnorm_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// phi_eM_cpp
NumericVector phi_eM_cpp(NumericVector M, double mu, double sigma, double m0, double b0, double b1, int n);
RcppExport SEXP _MATHPOP_phi_eM_cpp(SEXP MSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP m0SEXP, SEXP b0SEXP, SEXP b1SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_eM_cpp(M, mu, sigma, m0, b0, b1, n));
    return rcpp_result_gen;
END_RCPP
}
// Phi_f_cpp
double Phi_f_cpp(double Lim, double mu, double sigma, int n, double a);
RcppExport SEXP _MATHPOP_Phi_f_cpp(SEXP LimSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_f_cpp(Lim, mu, sigma, n, a));
    return rcpp_result_gen;
END_RCPP
}
// p_eM_cpp
double p_eM_cpp(double Lim, double mu, double sigma, double m0, double b0, double b1, double a, int n);
RcppExport SEXP _MATHPOP_p_eM_cpp(SEXP LimSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP m0SEXP, SEXP b0SEXP, SEXP b1SEXP, SEXP aSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(p_eM_cpp(Lim, mu, sigma, m0, b0, b1, a, n));
    return rcpp_result_gen;
END_RCPP
}
// Phi_f_trun_cpp
double Phi_f_trun_cpp(double Lim, double mu, double sigma, int n, double a);
RcppExport SEXP _MATHPOP_Phi_f_trun_cpp(SEXP LimSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_f_trun_cpp(Lim, mu, sigma, n, a));
    return rcpp_result_gen;
END_RCPP
}
// p_eM_trun_cpp
double p_eM_trun_cpp(double Lim, double mu, double sigma, double m0, double b0, double b1, double a, double TO, int n);
RcppExport SEXP _MATHPOP_p_eM_trun_cpp(SEXP LimSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP m0SEXP, SEXP b0SEXP, SEXP b1SEXP, SEXP aSEXP, SEXP TOSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Lim(LimSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type TO(TOSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(p_eM_trun_cpp(Lim, mu, sigma, m0, b0, b1, a, TO, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MATHPOP_err_M_cpp", (DL_FUNC) &_MATHPOP_err_M_cpp, 4},
    {"_MATHPOP_f_cpp", (DL_FUNC) &_MATHPOP_f_cpp, 3},
    {"_MATHPOP_f_cpp_trunc", (DL_FUNC) &_MATHPOP_f_cpp_trunc, 3},
    {"_MATHPOP_dnorm_cpp", (DL_FUNC) &_MATHPOP_dnorm_cpp, 3},
    {"_MATHPOP_phi_eM_cpp", (DL_FUNC) &_MATHPOP_phi_eM_cpp, 7},
    {"_MATHPOP_Phi_f_cpp", (DL_FUNC) &_MATHPOP_Phi_f_cpp, 5},
    {"_MATHPOP_p_eM_cpp", (DL_FUNC) &_MATHPOP_p_eM_cpp, 8},
    {"_MATHPOP_Phi_f_trun_cpp", (DL_FUNC) &_MATHPOP_Phi_f_trun_cpp, 5},
    {"_MATHPOP_p_eM_trun_cpp", (DL_FUNC) &_MATHPOP_p_eM_trun_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MATHPOP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
